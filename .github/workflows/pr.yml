name: Run PR Checks
on: pull_request

jobs:
  Generate-Migrations:
    name: Generate Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ github.head_ref }}
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x.x'
          dotnet-quality: 'preview'
          # cache: true
      # - run: dotnet restore --locked-mode
      # - name: Setup PowerShell module cache
      #   id: cacher
      #   uses: actions/cache@v3
      #   with:
      #     path: "~/.local/share/powershell/Modules"
      #     key: ${{ runner.os }}-SqlServer-PSScriptAnalyzer
      - name: Install required PowerShell modules
        # if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd YaqeenDAL
          dotnet tool install --global dotnet-ef
          dotnet add package Microsoft.EntityFrameworkCore --version 7.0.11
          dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.11
          dotnet add package Microsoft.EntityFrameworkCore.Tools --version 7.0.11
          dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 7.0.11
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Build
        shell: pwsh
        run: |
          cd YaqeenDAL
          dotnet build
          dotnet ef migrations list
          echo "Success!"
      - name: Generate Migrations
        shell: pwsh
        run: |
          cd YaqeenDAL
          # Run dotnet ef migrations list and capture the output
          $migrationsList = dotnet ef migrations list
          
          # Define the keyword to search for
          $keyword = "_${{ steps.extract_branch.outputs.branch }}"
          
          # Check if the output contains the keyword
          if ($migrationsList -match $keyword) {
              # Extract the name of the migration containing the keyword
              $migrationName = $migrationsList -match $keyword
          
              # Define the path to the Migrations directory
              $migrationsDirectory = "Migrations"
          
              # Generate the full path to the file to be removed
              $fileToRemove = Join-Path -Path $migrationsDirectory -ChildPath "$migrationName.cs"
          
              # Check if the file exists before attempting to remove it
              if (Test-Path $fileToRemove) {
                  # Remove the file
                  Remove-Item $fileToRemove -Force
                  Write-Host "File $fileToRemove removed."

                  $fileToRemove = Join-Path -Path $migrationsDirectory -ChildPath "$migrationName.Designer.cs"
                  # Remove the file
                  Remove-Item $fileToRemove -Force
                  Write-Host "File $fileToRemove removed."
              } else {
                  Write-Host "File $fileToRemove does not exist."
              }
          } else {
              Write-Host "Keyword '$keyword' not found in migrations list."
          }

          git status --porcelain
          dotnet ef migrations add ${{ steps.extract_branch.outputs.branch }} -v
          git add -A
          git status --porcelain

          # Get the output of `git status --porcelain`
          $gitStatus = git status --porcelain

          # Check if the output contains any rename entries (R)
          if ($gitStatus -match '^(R\s+.+\s+->\s+.+)$') {
              cd ..
              # Extract and process the rename entries
              $renamedFiles = $gitStatus.Split(" -> ").Split("R  ")
              Write-Host "Split into $renamedFiles.Length items"
              for ($i = 1; $i -lt $renamedFiles.Length; $i+=3) {
                $originalName = $renamedFiles[$i]
                $originalName = [System.IO.Path]::GetFileName($originalName)
                $newName = $renamedFiles[$i + 1]
                Write-Host "Renaming $newName to $originalName"
                Rename-Item -Path $newName -NewName $originalName -Force
              }

              # Check if Git still detects changes
              $gitStatusAfterRevert = git status --porcelain

              if ($gitStatusAfterRevert -eq '') {
                  Write-Host "Files were successfully reverted, and Git no longer detects changes."
              } else {
                  Write-Host "Files were reverted, but Git still detects changes:"
                  Write-Host $gitStatusAfterRevert
              }
          } else {
              Write-Host "No rename entries found in Git status output."
          }
      - name: Check Generated Migrations
        id: check_generated
        run: echo "changed=git status --porcelain" >> "$GITHUB_OUTPUT"
      - uses: CatChen/check-git-status-action@v1
        with:
          fail-if-not-clean: false # optional
          push-if-not-clean: true # optional
          # push-token: ${{ secrets.GITHUB_TOKEN }} # optional
          # request-changes-token: ${{ secrets.GITHUB_TOKEN }} # optional
          commit-message: "Migration Changes" # optional
          targets: "." #optional
    outputs:
      changed: ${{ steps.check_generated.outputs.changed }}
      # - name: Commit report
      #   run: |
      #     git config --global user.name 'Haytham Abuelfutuh'
      #     git config --global user.email 'haytham@afutuh.com'
      #     git add -A
      #     git commit -am "Automated report"
      #     git push
  Run-Migrations:
    name: Run Migrations
    runs-on: ubuntu-latest
    environment: "Neon.tech Staging"
    needs: [Generate-Migrations]
    if: needs.Generate-Migrations.outputs.changed == 2
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x.x'
          dotnet-quality: 'preview'
      - name: Install required PowerShell modules
        # if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd YaqeenDAL
          dotnet tool install --global dotnet-ef
          dotnet add package Microsoft.EntityFrameworkCore --version 7.0.11
          dotnet add package Microsoft.EntityFrameworkCore.Design --version 7.0.11
          dotnet add package Microsoft.EntityFrameworkCore.Tools --version 7.0.11
          dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 7.0.11
      - name: Run Database Migrations
        shell: pwsh
        run: |
          dotnet ef database update